#!/bin/bash

# Usage:
#
# pelton-print-environment <configname> \
#       [--isolation <isokey>] [--root <rootdir>] [--visited-file <filename>]

# Pelton projects will get tagged <configured project dns>-<configname>-<isokey>

set -e

export DOCKER_CMD=${DOCKER_CMD:-docker}
export DOCKER_REGISTRY=${DOCKER_REGISTRY:-localhost:32000}

POSITIONAL_ARGS=()

while [[ $# -gt 0 ]]; do
    case $1 in
        --config)
            CONFIG_NAME="$2"
            shift 2
            ;;
        --isolation)
            ISOLATION="$2"
            shift 2
            ;;
        --root)
            PELTON_ROOT_DIR="$2"
            PELTON_ROOT_CONFIG="$3"
            PELTON_ROOT_ISO="$4"
            shift 4
            ;;
        --visited-file)
            VISITED_FILE_NAME="$2"
            shift 2
            ;;
        -*|--*)
            echo "Unknown option $1"
            exit 1
            ;;
        *)
            POSITIONAL_ARGS+=("$1")
            shift
            ;;
    esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

ISOLATION=${ISOLATION:-a}
CONFIG_NAME=${CONFIG_NAME:-default}

cd ${1:-.}
if [[ ! -f pelton.json ]]; then
    echo "$(pwd) does not have a pelton.json file."
    exit 1
fi

if [[ -z "$PELTON_ROOT_DIR" ]]; then
    PELTON_ROOT_DIR=$(pwd)
    PELTON_ROOT_CONFIG="$CONFIG_NAME"
    PELTON_ROOT_ISO="$ISOLATION"
fi

PRINT_SCRIPT_DKR_CMD=$(cat pelton.json \
        | jq -r '.printScriptRunnerDockerfile')
PROJECT_NAME=$(cat pelton.json | jq -r '.projectName')
PROJECT_DNS_NAME=$(cat pelton.json | jq -r '.projectDnsName');

if [[ -z "$VISITED_FILE_NAME" ]]; then
    NEED_CLEANUP=yes
    VISITED_FILE_NAME=$(mktemp)
fi

while read -r SKIP; do
    if [[ "$SKIP" == "$PROJECT_DNS_NAME $CONFIG_NAME $ISOLATION" ]]; then
        exit 0
    fi
done < "$VISITED_FILE_NAME"
echo "$PROJECT_DNS_NAME $CONFIG_NAME $ISOLATION" >> "$VISITED_FILE_NAME"

1>&2 echo "Building $PROJECT_NAME environment..."

CONFIGURATION_JSON=$(cat pelton.json | jq -c ".configurations.$CONFIG_NAME")
PRINT_STATIC_DEPS_CMD=$( \
        echo "$CONFIGURATION_JSON" | jq -r '.printStaticDependencies // ""')
PRINT_SERVICE_CMD=$( \
        echo "$CONFIGURATION_JSON" | jq -r '.printService // ""')
BUILD_IMG_CMD=$(echo "$CONFIGURATION_JSON" | jq -r '.buildImage // ""')
SERVICE_NAME=$(echo "$CONFIGURATION_JSON" | jq -r '.serviceName // ""')
SERVICE_PORT=$(echo "$CONFIGURATION_JSON" | jq -r '.servicePort // ""')

IMAGE_NAME_BASE="${PROJECT_DNS_NAME}-${CONFIG_NAME}-${ISOLATION}"
SCRIPT_ENV_IMAGE_NAME="${IMAGE_NAME_BASE}-psr"
SERVICE_IMAGE_NAME="${DOCKER_REGISTRY}/${IMAGE_NAME_BASE}"

if [[ -n "$BUILD_IMG_CMD" ]]; then
    pelton-retry "waiting for registry at $DOCKER_REGISTRY" --timeout 300 \
            "curl --fail-with-body -X GET \"$DOCKER_REGISTRY/v2/\" &>/dev/null"

    pelton-run-in-script-runner \
            --config $CONFIG_NAME \
            --isolation $ISOLATION \
            --root-dir ${PELTON_ROOT_DIR@Q} \
            ${BUILD_IMG_CMD}

    eval ${DOCKER_CMD} push ${SERVICE_IMAGE_NAME} 1>&2

    REPO_DIGEST=$(eval ${DOCKER_CMD} inspect \
            "--format='{{index .RepoDigests 0}}'" ${SERVICE_IMAGE_NAME}:latest)
fi

if [[ -n "$PRINT_STATIC_DEPS_CMD" ]]; then
    echo
    echo '---'
    echo "# pelton-build-environment $(pwd)"
    echo

    pelton-run-in-script-runner \
            --config $CONFIG_NAME \
            --isolation $ISOLATION \
            --root-dir ${PELTON_ROOT_DIR@Q} \
            ${PRINT_STATIC_DEPS_CMD}
fi

if [[ -z "$NEED_CLEANUP" && -n "$PRINT_SERVICE_CMD" ]]; then
    echo
    echo '---'
    echo "# pelton-build-environment $(pwd)"
    echo

    pelton-run-in-script-runner \
            --config $CONFIG_NAME \
            --isolation $ISOLATION \
            --root-dir ${PELTON_ROOT_DIR@Q} \
            ${PRINT_SERVICE_CMD}
fi

if [[ -n "$SERVICE_NAME" ]]; then
    ROOT_PROJECT_DNS=$(pelton-read-config .projectDnsName $PELTON_ROOT_DIR)

    echo "---"

    (
        export PELTON_PROJ_DNS_NAME=$PROJECT_DNS_NAME
        export PELTON_PROJ_CONFIG_NAME=$CONFIG_NAME
        export PELTON_PROJ_ISO_KEY=$ISOLATION

        cat /usr/share/pelton/dependency-ingress.yaml.fragment | envsubst
    )

    DNS_NAMES_ARGS="$PROJECT_DNS_NAME $CONFIG_NAME $ISOLATION"

    if [[ -z "$NEED_CLEANUP" ]]; then
        EXTRA_DNS_ARGS="$ROOT_PROJECT_DNS $PELTON_ROOT_CONFIG $PELTON_ROOT_ISO"
        DNS_NAMES_ARGS="$DNS_NAMES_ARGS $EXTRA_DNS_ARGS"
    fi

    pelton-dns-names $DNS_NAMES_ARGS | while IFS= read -r DNS; do
        (
            export PELTON_DEP_DNS=$DNS
            export PELTON_DEP_SERVICE_NAME=${SERVICE_NAME}
            export PELTON_DEP_SERVICE_PORT=${SERVICE_PORT}

            cat /usr/share/pelton/dependency-ingress-rule.yaml.fragment \
                    | envsubst
        )
    done

    echo "..."
fi

echo "$CONFIGURATION_JSON" | jq -r '.dynamicDependencies // {} | keys[]' \
| while IFS= read -r DEP; do
    if [[ -z "$DEP" ]]; then
        continue
    fi

    DEP_CONFIG=$(echo "$CONFIGURATION_JSON" | jq -c ".dynamicDependencies[\"$DEP\"]")
    DEP_NAVIGATE_CMD=$(echo "$DEP_CONFIG" | jq -r '.navigate')
    DEP_CONFIG_NAME=$(echo "$DEP_CONFIG" | jq -r '.configuration // "default"')
    DEP_ISO_KEY=$(echo "$DEP_CONFIG" | jq -r ".isolation // \"$ISOLATION\"")

    DEP_RECURSIVE_CMD="
        set -e
        set -- ${CONFIG_NAME} ${ISOLATION@Q} ${IMAGE_NAME_BASE@Q} ${PELTON_ROOT_DIR@Q}
        export PELTON_CONFIG_NAME=${CONFIG_NAME}
        export PELTON_ISO_KEY=${ISOLATION@Q}
        export PELTON_IMAGE_TAG=${IMAGE_NAME_BASE@Q}
        export PELTON_ROOT_DIR=${PELTON_ROOT_DIR@Q}
        $DEP_NAVIGATE_CMD
        $0 --root ${PELTON_ROOT_DIR@Q} ${PELTON_ROOT_CONFIG@Q} \
                    ${PELTON_ROOT_ISO@Q} \
                --visited-file ${VISITED_FILE_NAME@Q} \
                --isolation ${DEP_ISO_KEY@Q} --config ${DEP_CONFIG_NAME@Q}
    "

    bash -c "$DEP_RECURSIVE_CMD"
done

if [[ -n "$NEED_CLEANUP" ]]; then
    rm "${VISITED_FILE_NAME}"
fi
