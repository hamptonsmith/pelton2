#!/bin/bash

set -e

PELTON_CONFIG_DIR=${PELTON_CONFIG_DIR:-$HOME/pelton}
PELTON_DNS_PREFIX=${PELTON_DNS_PREFIX:-"pltn-"}

export DOCKER_CMD=${DOCKER_CMD:-docker}
export DOCKER_REGISTRY=${DOCKER_REGISTRY:-localhost:32000}
export KUBECTL_CMD=${KUBECTL_CMD:-microk8s kubectl}
export PELTON_STATE_DIR=${PELTON_STATE_DIR:-${XDG_STATE_HOME:-$HOME/.local/state/pelton}}

POSITIONAL_ARGS=()

while [[ $# -gt 0 ]]; do
    case $1 in
        --config)
            CONFIG_NAME="$2"
            shift 2
            ;;
        --isolation)
            ISOLATION="$2"
            shift 2
            ;;
        --target-namespace)
            TARGET_NAMESPACE="$2"
            shift 2
            ;;
        -*|--*)
            echo "Unknown option $1"
            exit 1
            ;;
        *)
            POSITIONAL_ARGS+=("$1") # save positional arg
            shift # past argument
            ;;
    esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

TARGET_DIR=${1:-.}
cd $TARGET_DIR
shift

export PELTON_START_ARGS=$(jq --compact-output --null-input '$ARGS.positional' --args -- "${@}");

CONFIG_NAME=${CONFIG_NAME:-default}
ISOLATION=${ISOLATION:-a}
TARGET_NAMESPACE=${TARGET_NAMESPACE:-default}

if [[ ! -f pelton.json ]]; then
    echo "$TARGET_DIR does not have a pelton.json file."
    exit 1
fi

PROJECT_NAME=$(cat pelton.json | jq -r '.projectName')
PROJECT_DNS_NAME=$(cat pelton.json | jq -r '.projectDnsName');

PROJECT_NAMED_CONFIG=$(cat pelton.json | jq -r ".configurations.$CONFIG_NAME")
PROJECT_START=$(echo "$PROJECT_NAMED_CONFIG" | jq -r '.start // ""')
PROJECT_PRINT_SERVICE_CMD=$( \
        pelton-read-config ".configurations.$CONFIG_NAME.printService // \"\"")
PROJECT_SERVICE_NAME=$( \
        pelton-read-config ".configurations.$CONFIG_NAME.serviceName // \"\"")
PROJECT_SERVICE_PORT=$( \
        pelton-read-config ".configurations.$CONFIG_NAME.servicePort // \"\"")
PROJECT_JOB_NAME=$( \
        pelton-read-config ".configurations.$CONFIG_NAME.jobName // \"\"")
PROJECT_JOB_POD_SELECTOR=$( \
        pelton-read-config ".configurations.$CONFIG_NAME.jobPodSelector // \"\"")

function doStep() {
    3>&1 1>&2 2>&3 pelton-scroll-output "(${@}) 3>&1 1>&2 2>&3"
}

function serviceManifest() {
    echo
    echo "# pelton-start-target $(pwd)"

    if [[ -z "$PROJECT_PRINT_SERVICE_CMD" ]]; then
        1>&2 echo "* No target .printService command. Skipping."
    else
        1>&2 echo "* Running target .printService: $PROJECT_PRINT_SERVICE_CMD"

        echo '---'
        echo

        PELTON_ROOT_DIR=$(realpath $(pwd))
        doStep "pelton-run-in-script-runner \
                --config $CONFIG_NAME \
                --isolation $ISOLATION \
                --root-dir ${PELTON_ROOT_DIR@Q} \
                --start-args $PELTON_START_ARGS \
                '${PROJECT_PRINT_SERVICE_CMD}'"

        echo
        echo '...'
    fi

    if [[ -n "$PROJECT_SERVICE_NAME" ]]; then
        echo '---'
        echo

        (
            export PELTON_PROJ_DNS_NAME=$PROJECT_DNS_NAME
            export PELTON_PROJ_CONFIG_NAME=$CONFIG_NAME
            export PELTON_PROJ_ISO_KEY=$ISOLATION

            cat /usr/share/pelton/dependency-ingress.yaml.fragment | envsubst
        )

        DNS_NAMES_ARGS="$PROJECT_DNS_NAME $CONFIG_NAME $ISOLATION"

        pelton-dns-names $DNS_NAMES_ARGS | while IFS= read -r DNS; do
            (
                export PELTON_DEP_DNS=$DNS
                export PELTON_DEP_SERVICE_NAME=${PROJECT_SERVICE_NAME}
                export PELTON_DEP_SERVICE_PORT=${PROJECT_SERVICE_PORT}

                cat /usr/share/pelton/dependency-ingress-rule.yaml.fragment \
                        | envsubst
            )
        done

        echo
        echo '...'
    fi

    echo
}

NAMESPACE="$PELTON_DNS_PREFIX$PROJECT_DNS_NAME-$CONFIG_NAME-$ISOLATION"
OUTPUT_FILE="$(pelton-ns-state-dir $NAMESPACE)/env.yaml"
mkdir -p $(dirname "$OUTPUT_FILE")

pelton-sync-ns "$NAMESPACE" "$PROJECT_NAME's dependences out of sync in namespace $NAMESPACE. Syncing before attempting to update..."
pelton-build-environment \
        --config $CONFIG_NAME --isolation $ISOLATION \
        > "$OUTPUT_FILE"
pelton-sync-ns "$NAMESPACE" "$PROJECT_NAME's dependencies have changed. Syncing in namespace $NAMESPACE..."

if [[ -n "$PROJECT_PRINT_SERVICE_CMD" || -n "$PROJECT_SERVICE_NAME" ]]; then
    OUTPUT_FILE="$(pelton-ns-state-dir "$TARGET_NAMESPACE")/$NAMESPACE.yaml"
    mkdir -p $(dirname "$OUTPUT_FILE")

    pelton-sync-ns "$TARGET_NAMESPACE" "$PROJECT_NAME is out of sync in namespace $TARGET_NAMESPACE. Syncing before attempting to update..."
    serviceManifest $CONFIG_NAME > "$OUTPUT_FILE"
    pelton-sync-ns "$TARGET_NAMESPACE" "$PROJECT_NAME's definition has changed. Syncing in namespace $TARGET_NAMESPACE..."

    function cleanup() {
        OUTPUT_FILE="$(pelton-ns-state-dir "$TARGET_NAMESPACE")/$NAMESPACE.yaml"
        rm "$OUTPUT_FILE"
        pelton-sync-ns "$TARGET_NAMESPACE"
    }

    trap cleanup EXIT
fi

if [[ -n "$PROJECT_JOB_NAME" || -n "$PROJECT_JOB_POD_SELECTOR" ]]; then
    LIST_PODS="eval $KUBECTL_CMD -n $TARGET_NAMESPACE get pods"

    if [[ -n "$PROJECT_JOB_NAME" ]]; then
        LIST_PODS="$LIST_PODS --selector=job-name=$PROJECT_JOB_NAME"
    fi

    if [[ -n "$PROJECT_JOB_POD_SELECTOR" ]]; then
        LIST_PODS="$LIST_PODS --selector=$PROJECT_JOB_POD_SELECTOR"
    fi

    LIST_PODS="$LIST_PODS -o=jsonpath='{.items[*].metadata.name}'"

    # Wait for the job's pod to become available.
    TASK_NAME="waiting for $PROJECT_NAME's jobs"
    TASK_NAME="$TASK_NAME in namespace $TARGET_NAMESPACE to have running pods"
    pelton-retry "$TASK_NAME" --timeout 300 "$LIST_PODS --field-selector status.phase!=Pending | grep '.\+'" >/dev/null

    for pod in $(eval $LIST_PODS); do
        # No point in using kubetail to interleave these, they should all
        # terminate
        echo -e "\n[$pod]"
        pelton-retry "waiting for $PROJECT_NAME's job's pod $pod logs..." --timeout 300 "$KUBECTL_CMD -n $TARGET_NAMESPACE logs --all-containers=true --follow $pod"
    done

    for pod in $(eval $LIST_PODS --field-selector status.phase=Failed); do
        eval $KUBECTL_CMD -n $TARGET_NAMESPACE describe pod $pod
        echo -e "\nPod $pod of job $PROJECT_JOB_NAME failed. See logs above."
        echo
        SOME_FAILURE=yes
    done

    if [[ -z "$SOME_FAILURE" ]]; then
        echo 'Job completed successfully.'
    else
        exit 1
    fi
fi

if [[ -n "$PROJECT_SERVICE_NAME" ]]; then
    POD_SELECTOR_LINES=$( \
        eval "$KUBECTL_CMD -n $TARGET_NAMESPACE get svc/$PROJECT_SERVICE_NAME \
                -o=go-template='{{range \$key, \$value := .spec.selector}}{{printf \"%s=%s\\n\" \$key \$value}}{{end}}'" \
    )
    POD_SELECTOR=$(echo -en $POD_SELECTOR_LINES | tr '\n' ',')

    LIST_PODS="eval $KUBECTL_CMD -n $TARGET_NAMESPACE get pods"
    LIST_PODS="$LIST_PODS --field-selector status.phase=Running"
    LIST_PODS="$LIST_PODS --selector '$POD_SELECTOR'"
    LIST_PODS="$LIST_PODS -o=jsonpath='{.items[*].metadata.name}'"
    LIST_PODS="$LIST_PODS | tr ' ' ','"

    # Wait for the service to become available.
    TASK_NAME="waiting for svc/$PROJECT_SERVICE_NAME"
    TASK_NAME="$TASK_NAME in namespace $TARGET_NAMESPACE to have running pods"
    pelton-retry "$TASK_NAME" "$LIST_PODS | grep '.\+'" >/dev/null

    kubetail $(eval $LIST_PODS) -n $TARGET_NAMESPACE
fi
