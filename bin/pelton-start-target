#!/bin/bash

set -e

PELTON_CONFIG_DIR=${PELTON_CONFIG_DIR:-$HOME/pelton}
PELTON_DNS_PREFIX=${PELTON_DNS_PREFIX:-"pltn-"}

export DOCKER_CMD=${DOCKER_CMD:-docker}
export DOCKER_REGISTRY=${DOCKER_REGISTRY:-localhost:32000}
export KUBECTL_CMD=${KUBECTL_CMD:-microk8s kubectl}

POSITIONAL_ARGS=()

while [[ $# -gt 0 ]]; do
  case $1 in
    --isolation)
        ISOLATION="$2"
        shift
        shift
        ;;
    -*|--*)
      echo "Unknown option $1"
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=("$1") # save positional arg
      shift # past argument
      ;;
  esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

if [[ -z "$1" ]]; then
    echo 'Must specify a named configuration as the first argument.'
    exit 1
fi

TARGET_DIR=${2:-.}
cd $TARGET_DIR

ISOLATION=${ISOLATION:-niliso}

PROJECT_NAME=$(cat pelton.json | jq -r '.projectName')
PROJECT_DNS_NAME=$(cat pelton.json | jq -r '.projectDnsName');

PROJECT_NAMED_CONFIG=$(cat pelton.json | jq -r ".configurations.$1")
PROJECT_START=$(echo "$PROJECT_NAMED_CONFIG" | jq -r '.start // ""')

pelton-build-environment $1 "$(pwd)" --isolation $ISOLATION \
| pelton-sync-ns - \
        "$PELTON_DNS_PREFIX$PROJECT_DNS_NAME-$1-$ISOLATION"

if [[ -n "$PROJECT_START" ]]; then
    export PORT=$(pelton-find-port)

    MANIFEST=$(echo "
apiVersion: v1
kind: Service
metadata:
  name: $PROJECT_DNS_NAME-$1-$ISOLATION-svc
spec:
  type: ExternalName
  externalName: \"10.0.1.1\"
  ports:
    - protocol: TCP
      port: 80
      targetPort: $PORT

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: $PROJECT_DNS_NAME-$1-$ISOLATION-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  "

    pelton-dns-names $PROJECT_DNS_NAME $1 $ISOLATION \
    | while IFS= read -r DNS; do
        echo "
            - host: ${DNS}.localhost
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: $PROJECT_DNS_NAME-$1-$ISOLATION-svc
                      port:
                        number: 80
        "
    done)

    echo "$MANIFEST" | eval $KUBECTL_CMD \
            -n "$PELTON_DNS_PREFIX$PROJECT_DNS_NAME-$1-$ISOLATION" \
            apply -f -

    eval $PROJECT_START
fi

exit 0


PRINT_SERVICE_DOCKERFILE_DEV=$(cat package.json \
        | jq -r '.pelton.printServiceDockerfileDev')
PROJECT_NAME=$(cat package.json | jq -r '.pelton.projectName')

ENV_MANIFEST_FILE=$(mktemp)
pelton-print-environment $ENV_MANIFEST_FILE
pelton-sync-ns $ENV_MANIFEST_FILE "$1"
rm $ENV_MANIFEST_FILE

eval "$PRINT_SERVICE_DOCKERFILE_DEV" | DOCKER_BUILDKIT=1 docker build \
        --ssh default \
        --tag ${PROJECT_NAME} \
        -f - .

WRK_NODE_MODULES=$(mktemp -d)
docker run \
        -v $(pwd):/project \
        -v $WRK_NODE_MODULES:/project/node_modules \
        --rm \
        ${PROJECT_NAME}:latest
rm -rf $WRK_NODE_MODULES
