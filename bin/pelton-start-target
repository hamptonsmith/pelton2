#!/bin/bash

set -e

PELTON_CONFIG_DIR=${PELTON_CONFIG_DIR:-$HOME/pelton}
PELTON_DNS_PREFIX=${PELTON_DNS_PREFIX:-"pltn-"}

export DOCKER_CMD=${DOCKER_CMD:-docker}
export DOCKER_REGISTRY=${DOCKER_REGISTRY:-localhost:32000}
export KUBECTL_CMD=${KUBECTL_CMD:-microk8s kubectl}
export PELTON_STATE_DIR=${PELTON_STATE_DIR:-${XDG_STATE_HOME:-$HOME/.local/state/pelton}}

POSITIONAL_ARGS=()

while [[ $# -gt 0 ]]; do
  case $1 in
    --isolation)
        ISOLATION="$2"
        shift
        shift
        ;;
    --target-namespace)
        TARGET_NAMESPACE="$2"
        shift
        shift
        ;;
    -*|--*)
      echo "Unknown option $1"
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=("$1") # save positional arg
      shift # past argument
      ;;
  esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

if [[ -z "$1" ]]; then
    echo 'Must specify a named configuration as the first argument.'
    exit 1
fi

TARGET_DIR=${2:-.}
cd $TARGET_DIR

if [[ ! -f pelton.json ]]; then
    echo "$TARGET_DIR does not have a pelton.json file."
    exit 1
fi

ISOLATION=${ISOLATION:-a}
TARGET_NAMESPACE=${TARGET_NAMESPACE:-default}

PROJECT_NAME=$(cat pelton.json | jq -r '.projectName')
PROJECT_DNS_NAME=$(cat pelton.json | jq -r '.projectDnsName');

PROJECT_NAMED_CONFIG=$(cat pelton.json | jq -r ".configurations.$1")
PROJECT_START=$(echo "$PROJECT_NAMED_CONFIG" | jq -r '.start // ""')
PROJECT_PRINT_SERVICE_CMD=$( \
        pelton-read-config ".configurations.$1.printService")

function serviceManifest() {
    echo
    echo '---'
    echo "# pelton-start-target $(pwd)"
    echo

    PELTON_ROOT_DIR=$(realpath $(pwd))
    pelton-run-in-script-runner \
            --config $1 \
            --isolation $ISOLATION \
            --root-dir ${PELTON_ROOT_DIR@Q} \
            ${PROJECT_PRINT_SERVICE_CMD}

    echo
    echo '...'
}

NAMESPACE="$PELTON_DNS_PREFIX$PROJECT_DNS_NAME-$1-$ISOLATION"
OUTPUT_FILE="$(pelton-ns-state-dir $NAMESPACE)/env.yaml"
mkdir -p $(dirname "$OUTPUT_FILE")

pelton-build-environment $1 "$(pwd)" --isolation $ISOLATION > "$OUTPUT_FILE"
pelton-sync-ns "$NAMESPACE"

if [[ -n "$PROJECT_PRINT_SERVICE_CMD" ]]; then
    OUTPUT_FILE="$(pelton-ns-state-dir "$TARGET_NAMESPACE")/$NAMESPACE.yaml"
    mkdir -p $(dirname "$OUTPUT_FILE")
    serviceManifest $1 > "$OUTPUT_FILE"
    pelton-sync-ns "$TARGET_NAMESPACE"
fi

PROJECT_SERVICE_NAME=$( \
        pelton-read-config ".configurations.$1.serviceName // \"\"")

if [[ -n "$PROJECT_SERVICE_NAME" ]]; then
    trap true SIGINT
    set +e
    eval $KUBECTL_CMD logs --follow svc/$PROJECT_SERVICE_NAME
    set -e
fi

if [[ -n "$PROJECT_PRINT_SERVICE_CMD" ]]; then
    OUTPUT_FILE="$(pelton-ns-state-dir "$TARGET_NAMESPACE")/$NAMESPACE.yaml"
    rm "$OUTPUT_FILE"
    pelton-sync-ns "$TARGET_NAMESPACE"
fi
