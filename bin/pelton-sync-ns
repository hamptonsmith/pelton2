#!/bin/bash

set -e

export KUBECTL_CMD=${KUBECTL_CMD:-microk8s kubectl}

if [[ -z "$1" ]]; then
    echo 'Must provide at least one namespace.'
    exit 1
fi

function nsManifest() {
    find $(pelton-ns-state-dir $1) -name '*.yaml' | xargs --no-run-if-empty cat

    # This ensures our manifest isn't empty and allows `apply --purge` to work
    # even when there are otherwise no objects.
    cat /usr/share/pelton/ns-defaults.yaml | envsubst
}

for NS in "$@"; do
    TMP_FILE=$(mktemp)
    nsManifest "$1" > "$TMP_FILE"

    echo "Updating namespace $NS..."

    eval $KUBECTL_CMD create namespace $NS 2>/dev/null || true

    pelton-scroll-output \
            "cat '$TMP_FILE' | microk8s kubectl -n $NS apply -f -"

    DELETING=$(cat "$TMP_FILE" \
            | eval $KUBECTL_CMD -n $NS apply \
                    -f - \
                    --prune \
                    --all \
                    --dry-run=server \
            | cut -d' ' -f1-2 \
            | grep '^.* pruned$' \
            | grep -v '^namespace/' \
            | cut -d' ' -f1)

    if [[ -n "$DELETING" ]]; then
        DND_PATH="${XDG_CONFIG_HOME:-$HOME/.config}"
        DND_PATH="$DND_PATH/pelton/environment/namespaces/$NS/do-not-delete"

        if [[ -f "$DND_PATH" ]]; then
            for PATTERN in $(cat "$DND_PATH"); do
                DELETING=$(echo "$DELETING" | grep -v "^$PATTERN\$")
            done
        fi

        echo "Pruning..."

        pelton-scroll-output "echo -e '$DELETING' | xargs --no-run-if-empty \
                $KUBECTL_CMD -n $NS delete"
    fi
done
